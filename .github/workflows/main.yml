name: CI

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  version:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        container: ["fedora:42", "fedora:43", "ubuntu:jammy"]
    steps:
      - name: Check container sha tags
        run: |
          docker pull "${{ matrix.container }}"
          docker inspect "${{ matrix.container }}" --format=${{ '{{.RepoDigests}}{{.Created}}' }}


  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - container: fedora:42
            ucd_dir: /usr/share/unicode/ucd
            latest_xkb: 0
          - container: fedora:42
            ucd_dir: /usr/share/unicode/ucd
            test_config: '--disable-wayland'
            latest_xkb: 0
          - container: fedora:42
            ucd_dir: /usr/share/unicode/ucd
            test_config: '--disable-appindicator'
            latest_xkb: 0
          - container: fedora:43
            ucd_dir: /usr/share/unicode/ucd
            latest_xkb: 1
          - container: ubuntu:jammy
            ucd_dir: /usr/share/unicode
            latest_xkb: 0

    container:
      image: ${{ matrix.container }}

    steps:
      - name: Install distro packages
        env:
         # For autogen.sh
         UBUNTU_PACKAGES_AUTOGEN: >
           autopoint
           strace
         # For make from
         # https://packages.ubuntu.com/search?searchon=sourcenames&keywords=ibus
         UBUNTU_PACKAGES_MAKE: >
           desktop-file-utils
           dbus-x11
           gobject-introspection
           gtk-doc-tools
           iso-codes
           libdconf-dev
           libdbusmenu-gtk3-dev
           libgirepository1.0-dev
           libglib2.0-dev
           libgtk-3-bin
           libgtk-3-dev
           libgtk-4-dev
           libgtk2.0-dev
           libnotify-dev
           libtool
           libwayland-dev
           python-gi-dev
           python-is-python3
           python3-all
           systemd
           unicode-cldr-core
           unicode-data
           valac
           valac-0.56-vapi
           wayland-protocols
           wget
         # for ibus-keypress
         UBUNTU_PACKAGES_CI_KEY: >
           gir1.2-gnomedesktop-4.0
           libevdev-dev
           libudev-dev
         FEDORA_PACKAGES_MAKE: >
           cldr-emoji-annotation
           dbus-glib-devel
           dbus-python-devel
           dbus-x11
           dconf-devel
           desktop-file-utils
           gettext-devel
           git
           gtk-doc
           gtk2-devel
           gtk3-devel
           gtk4-devel
           iso-codes-devel
           libdbusmenu-gtk3-devel
           libnotify-devel
           libtool
           python3-devel
           python3-gobject-devel
           systemd
           unicode-emoji
           unicode-ucd
           vala
           wayland-devel
           wayland-protocols-devel
         # for gtkdoc-fixxref
         FEDORA_PACKAGES_GTKDOC: >
           glib2-doc
         # for ibus-keypress
         FEDORA_PACKAGES_CI_KEY: >
           gnome-shell
           gnome-shell-extension-no-overview
           gnome-desktop4
           libevdev-devel
           systemd-devel
         # for gcc -fanalyzer -fsanitize=address -fsanitize=leak options
         # xkeyboard-config-devel to make ibus/engine/simle.xml.in
         FEDORA_PACKAGES_DISTRO: >
           libasan
           xkeyboard-config-devel
           patch
           strace

        run: |
          case "${{ matrix.container }}" in
          ubuntu*)
            cat /etc/lsb-release
            echo "apt-get update -qq -y"
            apt-get update -qq -y
            echo "apt-get install -q -y git"
            apt-get install -q -y git
            PACKAGES=$(echo "$UBUNTU_PACKAGES_AUTOGEN" | tr -d '\n')
            PACKAGES=$(echo "$PACKAGES $UBUNTU_PACKAGES_MAKE" | tr -d '\n')
            PACKAGES=$(echo "$PACKAGES $UBUNTU_PACKAGES_CI_KEY" | tr -d '\n')
            echo "apt-get install -y $PACKAGES"
            apt-get install -y $PACKAGES
            dpkg -l | grep unicode-data
            ;;
          fedora*)
            cat /etc/fedora-release
            DNF=dnf
            echo "$DNF -y update"
            $DNF -y update
            echo "$DNF -y install git which"
            $DNF -y install git which
            PACKAGES=$(echo "$FEDORA_PACKAGES_MAKE" | tr -d '\n')
            PACKAGES=$(echo "$PACKAGES $FEDORA_PACKAGES_GTKDOC" | tr -d '\n')
            PACKAGES=$(echo "$PACKAGES $FEDORA_PACKAGES_CI_KEY" | tr -d '\n')
            PACKAGES=$(echo "$PACKAGES $FEDORA_PACKAGES_DISTRO" | tr -d '\n')
            echo "$DNF -y install $PACKAGES"
            $DNF -y install $PACKAGES
            rpm -q gnome-shell
            V=$(rpm -q gnome-shell | sed -e 's/gnome-shell-\([0-9]*\)[.-~].*/\1/')
            grep $V /usr/share/gnome-shell/extensions/no-overview@fthx/metadata.json
            ;;
          *)
            echo "Not supported ${{ matrix.container }}"
            ls /etc/*release
            cat /etc/*release
            exit 1
            ;;
          esac
          pwd
          echo $GITHUB_WORKSPACE
          ls -a

      - uses: actions/checkout@v4
        with:
          #repository: ibus/ibus
          fetch-depth: 200

      - name: Fetch git tags
        run: |
          pwd
          id
          ls -al
          git config --global --add safe.directory $GITHUB_WORKSPACE
          git branch
          git fetch --prune --unshallow --tags
          echo $PATH

      - name: Run autogen
        # configure options from
        # https://salsa.debian.org/debian/ibus/-/blob/master/debian/rules
        run: >
          if ! ls /usr/share/vala-*/vapi/wayland-client.vapi;
          then
          wget https://gitlab.gnome.org/GNOME/vala/-/raw/0.56/vapi/wayland-client.vapi;
          mv wayland-client.vapi bindings/vala/.;
          fi;
          export SAVE_DIST_FILES=1;
          ./autogen.sh
          --enable-gtk-doc
          --with-python=/usr/bin/python3
          --with-ucd-dir=${{ matrix.ucd_dir }}
          --enable-install-tests
          ${{ matrix.test_config }};
          test 0${{ matrix.latest_xkb }} -ne 1 &&
          make -C engine maintainer-clean-generic || :

      - name: Run make
        # Set the cutom DESTDIR because the default DESTDIR
        # /home/travis/bulid/fujiwarat/$PKG/ibus/ibus-$VERSION/_inst seems to
        # be too long and failed to set DESTDIR to install
        # bindings/pygobject/IBus.py
        run: >
          export DISABLE_DAEMONIZE_IN_TESTS=1;
          make -j$(nproc) distcheck
          DISTCHECK_CONFIGURE_FLAGS="
          --enable-gtk-doc
          --disable-schemas-install
          --enable-memconf
          --with-python=/usr/bin/python3
          --with-ucd-dir=${{ matrix.ucd_dir }}
          --enable-install-tests
          ${{ matrix.test_config }}
          "
          DISABLE_GUI_TESTS="
          ibus-compose ibus-keypress test-stress xkb-latin-layouts
          "
          VERBOSE=1
          DESTDIR="$HOME/build/$USER/dest"

  build-netbsd:
    name: "build (NetBSD/amd64 10.0 with pkgsrc)"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          #repository: ibus/ibus
          fetch-depth: 200

      - name: Fetch git tags
        run: |
          pwd
          id
          ls -al
          git config --global --add safe.directory $GITHUB_WORKSPACE
          git branch
          git fetch --prune --unshallow --tags
          echo $PATH

      - name: Install packages and run autogen and make (on the NetBSD VM)
        uses: vmactions/netbsd-vm@v1
        with:
          release: "10.0"
          copyback: false
          # Check https://github.com/NetBSD/pkgsrc/blob/trunk/inputmethod/ibus/Makefile to check dependencies
          prepare: |
            ftp -o - https://cdn.NetBSD.org/pub/NetBSD/NetBSD-`uname -r`/amd64/binary/sets/xbase.tar.xz | tar -C / -zxpf - ./usr/X11R7/bin ./usr/X11R7/include ./usr/X11R7/lib ./usr/X11R7/share
            ftp -o - https://cdn.NetBSD.org/pub/NetBSD/NetBSD-`uname -r`/amd64/binary/sets/xcomp.tar.xz | tar -C / -zxpf - ./usr/X11R7/bin ./usr/X11R7/include ./usr/X11R7/lib ./usr/X11R7/share
            # netbsd-vm has installed pkgsrc glib2 so explicitly update it
            pkg_add -u glib2
            pkg_add -u pkgconf autoconf automake libtool-base intltool gmake
            pkg_add -u cldr-emoji-annotation unicode-character-database unicode-emoji
            pkg_add -u py311-gobject3 dconf gettext-tools gobject-introspection gettext-lib hicolor-icon-theme vala dbus libnotify iso-codes gtk2+ gtk3+
            pkg_add -u glib2-tools gtk-doc gdbus-codegen git-base
            git config --global --add safe.directory $GITHUB_WORKSPACE

          run: >
            MAKE=gmake
            MSGFMT=/usr/pkg/bin/msgfmt
            LDFLAGS='-L/usr/pkg/lib -Wl,-R/usr/pkg/lib -L/usr/lib -Wl,-R/usr/lib -L/usr/X11R7/lib -Wl,-R/usr/X11R7/lib'
            ./autogen.sh
            --sysconfdir=/usr/pkg/etc
            --localedir=/usr/pkg/share/locale
            --enable-dconf
            --enable-gtk2
            --enable-gtk3
            --disable-gtk4
            --enable-surrounding-text
            --enable-introspection=yes
            --disable-systemd-services
            --disable-appindicator
            --with-python=/usr/pkg/bin/python3.11
            --with-unicode-emoji-dir=/usr/pkg/share/unicode/emoji
            --with-emoji-annotation-dir=/usr/pkg/share/unicode/cldr/common/annotations
            --with-ucd-dir=/usr/pkg/share/unicode/ucd
            --x-includes=/usr/X11R7/include
            --x-libraries=/usr/X11R7/lib
            --prefix=/usr/pkg
            --mandir=/usr/pkg/man
            --enable-option-checking=yes
            --enable-gtk-doc
            --enable-install-tests;
            export DISABLE_DAEMONIZE_IN_TESTS=1;
            gmake distcheck
            LDFLAGS="
            -L/usr/pkg/lib -Wl,-R/usr/pkg/lib
            -L/usr/lib -Wl,-R/usr/lib
            -L/usr/X11R7/lib -Wl,-R/usr/X11R7/lib
            "
            DISTCHECK_CONFIGURE_FLAGS="
            MAKE=\"gmake\"
            MSGFMT=\"/usr/pkg/bin/msgfmt\"
            --enable-gtk-doc
            --disable-schemas-compile
            --enable-memconf
            --sysconfdir=/usr/pkg/etc
            --localedir=/usr/pkg/share/locale
            --enable-dconf
            --enable-gtk2
            --enable-gtk3
            --disable-gtk4
            --enable-surrounding-text
            --enable-introspection=yes
            --disable-systemd-services
            --disable-appindicator
            --with-python=/usr/pkg/bin/python3.11
            --with-unicode-emoji-dir=/usr/pkg/share/unicode/emoji
            --with-emoji-annotation-dir=/usr/pkg/share/unicode/cldr/common/annotations
            --with-ucd-dir=/usr/pkg/share/unicode/ucd
            --x-includes=/usr/X11R7/include
            --x-libraries=/usr/X11R7/lib
            --prefix=/usr/pkg
            --mandir=/usr/pkg/man
            --enable-install-tests
            "
            DISABLE_GUI_TESTS="
            ibus-compose ibus-keypress test-stress xkb-latin-layouts
            "
            VERBOSE=1
            DESTDIR="$HOME/build/$USER/dest"
